name: Build Password Board

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create release with artifacts'
        required: false
        type: boolean
        default: false

jobs:
  extract-version:
    name: Extract Version
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version from pubspec.yaml
      id: get_version
      run: |
        VERSION=$(sed -n 's/^version: \([0-9]*\.[0-9]*\.[0-9]*\).*/\1/p' pubspec.yaml)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"

  build-linux:
    name: Build Linux
    needs: extract-version
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.2'
        channel: 'stable'
        cache: true

    - name: Cache system dependencies
      uses: actions/cache@v4
      with:
        path: |
          /var/cache/apt/archives/*.deb
          /var/lib/apt/lists/*
        key: linux-apt-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          linux-apt-

    - name: Install Linux dependencies
      run: |
        sudo apt-get update --quiet
        sudo apt-get install -y --no-install-recommends \
          clang \
          cmake \
          ninja-build \
          pkg-config \
          libgtk-3-dev \
          libblkid-dev \
          liblzma-dev

    - name: Enable Linux desktop
      run: flutter config --enable-linux-desktop

    - name: Install dependencies
      run: |
        echo "Installing Flutter dependencies..."
        flutter pub get --verbose

    - name: Build Linux release
      run: |
        echo "Starting Flutter build..."
        time flutter build linux --release
      timeout-minutes: 20
      env:
        FLUTTER_BUILD_MODE: release

    - name: Create Linux archive
      run: |
        echo "Checking build directory structure..."
        ls -la build/linux/x64/release/ || echo "Build directory not found"
        if [ -d "build/linux/x64/release/bundle" ]; then
          echo "Creating Linux archive..."
          cd build/linux/x64/release/bundle
          echo "Bundle size before compression:"
          du -sh .
          tar -czf "${GITHUB_WORKSPACE}/password_board_linux.tar.gz" . --exclude="*.debug" --exclude="*.sym"
          echo "Archive created successfully"
          ls -lh "${GITHUB_WORKSPACE}/password_board_linux.tar.gz"
        else
          echo "Linux bundle directory not found, checking alternatives..."
          find build/linux/ -name "*" -type d | grep -i release || echo "No release directories found"
          echo "Error: Linux build directory not found"
          exit 1
        fi

    - name: Upload Linux build
      uses: actions/upload-artifact@v4
      with:
        name: password-board-linux
        path: password_board_linux.tar.gz
        retention-days: 30

  build-windows:
    name: Build Windows
    needs: extract-version
    runs-on: windows-2022

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.2'
        channel: 'stable'
        cache: true

    - name: Cache Windows dependencies
      uses: actions/cache@v4
      with:
        path: |
          C:\ProgramData\Microsoft\Windows\Start Menu\Programs
          C:\Windows\System32
        key: windows-sys-deps-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          windows-sys-deps-

    - name: Enable Windows desktop
      run: flutter config --enable-windows-desktop

    - name: Install dependencies
      run: |
        echo "Installing Flutter dependencies..."
        flutter pub get

    - name: Build Windows release
      run: |
        echo "Starting Flutter Windows build..."
        flutter build windows --release
      timeout-minutes: 15

    - name: Create Windows archive
      run: |
        echo "Checking Windows build directory structure..."
        Get-ChildItem build/windows/x64/runner/ -ErrorAction SilentlyContinue || echo "Build directory not found"
        if (Test-Path "build/windows/x64/runner/Release") {
          echo "Creating Windows archive..."
          cd build/windows/x64/runner/Release
          Compress-Archive -Path . -DestinationPath "${env:GITHUB_WORKSPACE}/password_board_windows.zip" -Force
          echo "Archive created successfully"
          Get-Item "${env:GITHUB_WORKSPACE}/password_board_windows.zip"
        } else {
          echo "Windows Release directory not found, checking alternatives..."
          Get-ChildItem build/windows/ -Recurse -Directory | Where-Object { $_.Name -like "*Release*" -or $_.Name -like "*release*" }
          echo "Error: Windows build directory not found"
          exit 1
        }

    - name: Upload Windows build
      uses: actions/upload-artifact@v4
      with:
        name: password-board-windows
        path: password_board_windows.zip
        retention-days: 30

  build-macos:
    name: Build macOS
    needs: extract-version
    runs-on: macos-13

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.2'
        channel: 'stable'
        cache: true

    - name: Cache macOS dependencies
      uses: actions/cache@v4
      with:
        path: |
          /usr/local/lib
          /usr/local/include
          /Library/Developer/CommandLineTools
        key: macos-sys-deps-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          macos-sys-deps-

    - name: Enable macOS desktop
      run: flutter config --enable-macos-desktop

    - name: Install dependencies
      run: |
        echo "Installing Flutter dependencies..."
        flutter pub get

    - name: Build macOS release
      run: |
        echo "Starting Flutter macOS build..."
        flutter build macos --release
      timeout-minutes: 15

    - name: Create macOS archive
      run: |
        echo "Checking macOS build directory structure..."
        ls -la build/macos/Build/Products/ || echo "Build directory not found"
        if [ -d "build/macos/Build/Products/Release" ]; then
          echo "Creating macOS archive..."
          cd build/macos/Build/Products/Release
          ls -la *.app || echo "No .app files found"

          # Find the actual app name
          APP_NAME=$(ls -d *.app 2>/dev/null | head -n1)
          if [ -n "$APP_NAME" ]; then
            echo "Found app: $APP_NAME"
            # Create archive in repository root
            zip -r "${GITHUB_WORKSPACE}/password_board_macos.zip" "$APP_NAME"
            echo "Archive created successfully"
            ls -la "${GITHUB_WORKSPACE}/password_board_macos.zip"
          else
            echo "Error: No .app files found in Release directory"
            ls -la
            exit 1
          fi
        else
          echo "Error: macOS build directory not found"
          exit 1
        fi

    - name: Upload macOS build
      uses: actions/upload-artifact@v4
      with:
        name: password-board-macos
        path: password_board_macos.zip
        retention-days: 30





  release:
    name: Create Release
    needs: [extract-version, build-linux, build-windows, build-macos]
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      pull-requests: write
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true') || (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'))

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Prepare individual platform files
      run: |
        # Move individual platform files to root for release
        mv artifacts/password-board-linux/password_board_linux.tar.gz ./
        mv artifacts/password-board-windows/password_board_windows.zip ./
        mv artifacts/password-board-macos/password_board_macos.zip ./

        # List files to verify
        ls -la *.tar.gz *.zip

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.extract-version.outputs.version }}
        name: Password Board v${{ needs.extract-version.outputs.version }}
        draft: true
        prerelease: false
        body: |
          ## Password Board v${{ needs.extract-version.outputs.version }}

          ### Downloads
          - **🐧 Linux**: `password_board_linux.tar.gz`
          - **🪟 Windows**: `password_board_windows.zip`
          - **🍎 macOS**: `password_board_macos.zip`

          ### Installation Instructions

          **🐧 Linux:**
          ```bash
          tar -xzf password_board_linux.tar.gz
          cd password_board
          ./password_board
          ```

          **🪟 Windows:**
          ```cmd
          # Extract password_board_windows.zip
          # Run password_board.exe
          ```

          **🍎 macOS:**
          ```bash
          # Extract password_board_macos.zip
          # Run passboard_app.app
          ```

          ### Features
          - 🔐 Secure password management for MSPs
          - 📋 One-click copy functionality
          - 🔍 Advanced search and filtering
          - 📊 Client organization
          - 🎨 Modern Material Design 3 UI
          - 🔄 Cross-platform compatibility

        files: |
          password_board_linux.tar.gz
          password_board_windows.zip
          password_board_macos.zip
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
